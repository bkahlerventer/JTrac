<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<book>
    <bookinfo>
        <title>JTrac</title>
        <subtitle>User / Developer Guide</subtitle>
        <releaseinfo>2.0-EA1</releaseinfo>
        <authorgroup>
            <author>
                <firstname>Peter</firstname>
                <surname>Thomas</surname>
            </author>
        </authorgroup>
    </bookinfo>

    <toc/>

    <preface id="preface">
        <title>Preface</title>
        <para>
            This document is a reference guide for <ulink url="http://jtrac.info">JTrac</ulink>
            - the generic issue tracking web-application.  This document is not only a user-guide
            but can also serve as a reference for developers interested in contributing to JTrac.
        </para>
        <para>
            This documentation has been generated using the DocBook configuration 
            used by the <ulink url="http://www.springframework.org">Spring</ulink> development team. 
            This particular simplified DocBook helper package was originally developed by Chris Bauer of the
            <ulink url="http://www.hibernate.org">Hibernate</ulink> project.  Thanks go out to all those who
            perfected this very handy approach.
        </para>
    </preface>

    <chapter id="introduction">
        <title>Introduction</title>
        <sect1 id="introduction-about">
            <title>About</title>
            <para>
                JTrac is a generic issue-tracking web-application that can be easily customized by adding 
                custom fields and drop-downs. Features include customizable workflow, field level permissions, 
                e-mail integration, file attachments and a detailed history view.
            </para>
            <para>
                JTrac was created after the author felt that he could write a much better alternative to a 
                commercial defect tracking tool that he was having to use. Development started in 2004. 
                There have been quite a few releases already and a small but growing base of satisfied users exist 
                who are friends and colleagues of the author. JTrac is ideal for issue tracking but is so generic 
                that you can use it to track well - almost anything.
            </para>
            <para>
                JTrac development used to be hosted at <ulink url="https://jtrac.dev.java.net"/> but moved to SourceForge 
                in early 2006. The older working version was based on Spring JDBC and MS Access and is not being maintained
                any more.  JTrac was completely re-written to use Hibernate for persistence and the Acegi security framework
                for Spring and it now uses the latest Java 5.0 and JSP 2.0 features. 
            </para>            
        </sect1>        
        
        <sect1 id="introduction-releasenotes">
            <title>Release Notes</title>
            <para>
                Version 2.0-EA1
            </para>
            <para>
                As the version number implies, 2.0-EA1 is intended purely as an Early Access release, in order to get 
                as much feedback as possible from interested users.
            </para>
            <para>
                JTrac is not yet recommended for production usage.  The main reason is that there may be some 
                more changes to the database schema.  JTrac 2.0 final should be available by the end of June 2006.
            </para>
            <para>
                You are encouraged to try out JTrac and communicate your feedback and interest in future versions
                to the JTrac development team.  Note that you can be up and running with JTrac by just dropping
                the WAR file into your servlet engine - which makes it extremely easy to evaluate.                
            </para>          
        </sect1>         
    </chapter>
    
    <chapter id="features">
        <title>Features</title>
        <sect1 id="features-main">                
            <title>Overview</title>
            <para>                    
                JTrac has all the features you would expect from a standard issue-tracking application such as 
                file-attachments support and e-mail integration.  And with powerful customization options,
                especially in the areas of workflow and field-level permissions, JTrac compares favorably to
                commercial tools.
            </para>             
            <sect2 id="features-customfields">
                <title>Custom Fields</title>
                <para>                    
                    JTrac can be used to effectively track various kinds of things such as Bugs, Action Items and Tasks.
                    You can easily add the following types of custom fields to a tracker project:
                    <itemizedlist>
                        <listitem>
                            <para>Drop Down List</para>
                        </listitem>
                        <listitem>
                            <para>Free Text Field</para>
                        </listitem>
                        <listitem>
                            <para>Date Picker</para>
                        </listitem>
                        <listitem>
                            <para>(Decimal) Number</para>
                        </listitem>                                
                    </itemizedlist>                   
                </para>
                <para>
                    <mediaobject>
                        <imageobject role="html">
                            <imagedata align="center" fileref="../images/custom-fields.png"/>
                        </imageobject>
                        <caption>
                            <para>Setting up custom fields for a project</para>
                        </caption>
                    </mediaobject>
                </para>                
            </sect2>
            <sect2 id="features-customworkflow">
                <title>Custom Workflow</title>
                <para>
                    Each tracker project that you create can have a different workflow.  JTrac allows for 
                    complete customization of the tracker-item lifecycle, right down to the names of
                    each intermediate state.  You can even configure whether or not field value editing is
                    permitted for each state - and that too at a field-level.
                </para>
                <para>
                    <mediaobject>
                        <imageobject role="html">
                            <imagedata align="center" fileref="../images/custom-workflow-before.png"/>
                        </imageobject>
                        <caption>
                            <para>Default workflow - before customization</para>
                        </caption>
                    </mediaobject>
                </para>
                <para>
                    <mediaobject>
                        <imageobject role="html">
                            <imagedata align="center" fileref="../images/custom-workflow-after.png"/>
                        </imageobject>
                        <caption>
                            <para>An example of a customized workflow</para>
                        </caption>
                    </mediaobject>
                </para>                  
            </sect2>
            <sect2 id="features-customroles">
                <title>Custom Roles</title>
                <para>
                    JTrac customization does not stop at workflow - you can also define different roles for each tracker
                    project that you set up.  This allows for tremendous flexibility - for example you could define that
                    a "DEVELOPER" role can only mark "Assigned" items as "Fixed" and that only a "TESTER" role has the
                    power to mark a "Fixed" item as "Closed".  JTrac allows you complete control over the workflow and
                    you can easily tweak it to fit your existing process rather than the other way around.
                </para>
                <para>
                    Also, field-level permissions can be mapped to roles.  This allows for even more flexibility - for
                    example, you can set a project up so that only a "MANAGER" can change the "Severity" level after a
                    bug is submitted.
                </para>                
            </sect2>
            <sect2 id="features-easytoinstall">
                <title>Easy to Install</title>
                <para>
                    Since JTrac uses Hibernate it can support any database.  Any servlet version 2.4 compliant container
                    such as Apache Tomcat 5.5.X is sufficient to run JTrac.
                </para>
                <para>
                    One of the useful features of JTrac is that it is distributed as a WAR file and you can be up
                    and running by just deploying the WAR file.  The JTrac web-application checks the 
                    environment on startup and if a configured database is not detected, HSQLDB is used by default.
                    This means that you can easily evaluate JTrac - just drop the WAR file into your servlet engine
                    and you can straight away log in to the application.
                </para>                
            </sect2>
            <sect2 id="features-search">
                <title>Flexible Search Options</title>
            </sect2>
            <sect2 id="features-excel">
                <title>Export to Excel</title>
            </sect2>
            <sect2 id="features-attachments">
                <title>Attachments Support</title>
            </sect2>            
            <sect2 id="features-navigation">
                <title>Simple Navigation</title>
            </sect2>
            <sect2 id="features-email">
                <title>E-mail Integration</title>
                <para>
                    (Note that this is not yet implemented in version 2.0-EA1.)
                </para>
                <para>
                    All status changes for an item will trigger e-mail notifications by default.
                    You can choose to add multiple users into a "notify list" at the time of raising a new item
                    or updating the history for an item.
                </para>
                <para>
                    <mediaobject>
                        <imageobject role="html">
                            <imagedata align="center" fileref="../images/notify-list.png"/>
                        </imageobject>
                        <caption>
                            <para>Add multiple users to a "notify list" while creating or updating an item</para>
                        </caption>
                    </mediaobject>
                </para>                 
            </sect2>               
        </sect1>    
    </chapter>
    
    <chapter id="installation">
        <title>Installation</title>            
        <sect1 id="installation-quick">
            <title>Quick Installation</title>
            <para>                    
                JTrac has an extremely convenient "quick-install" option where it does not require any
                external database to be available.
            </para>                  
            <para>                    
                Once you obtain "jtrac.war" from the release package or the JTrac download site you can
                easily start it in any servlet 2.4 compliant container.  For example, if you have 
                Apache Tomcat 5.5.X, you can either copy the WAR file into the [tomcat home]/webapps folder 
                or choose to upload the WAR file through the Tomcat console.
            </para>
            <para>                    
                JTrac saves database information and uploaded attachments into a directory on the server.
                This directory is logically called the "jtrac.home".  When you do a "quick-install" of JTrac
                by just deploying the WAR file, JTrac creates a ".jtrac" folder in the user home folder and
                uses that location as the home directory.
            </para>                 
        </sect1>
        <sect1 id="installation-custom">
            <title>Custom Installation</title>
            <para>                    
                To change the location of "jtrac.home" you need to set a Java system property called "jtrac.home"
                to a valid path on the server.
            </para> 
        </sect1>            
    </chapter>      
    
    <chapter id="faq">
        <title>FAQ</title>
        <sect1 id="faq-why">
            <title>Do we really need another issue tracker?</title>
            <para>
                There are indeed quite a few issue trackers available, both commercial and open source.
                JTrac already has flexible workflow capabilities and offers control over field-level permissions that 
                most other open-source issue trackers lack.  JTrac is designed to be able to handle requirements management
                in the future and this is seen to be an area where there aren't many open source tools that support
                the needs of agile development teams.
            </para>
            <para>
                JTrac is also written from the ground up to make use of the very best and latest in Java.  For example
                JTrac is developed using JDK 5.0 features and is targeted at JSP 2.0 and above.
            </para>               
        </sect1>
        <sect1 id="faq-architecture">
            <title>What is the JTrac architecture like?</title>
            <para>
                JTrac is built using the Spring Framework as far as possible and uses Spring WebFlow as far as possible
                within the MVC layer.  Also the Acegi security framewok for Spring has been used.  JTrac thus is a 
                "light-weight" Java EE application that just requires any version 2.4 compliant servlet engine.
                Hibernate is used for data persistence.  This allows for JTrac to be database neutral and any database
                supported by Hibernate can be used.
            </para>
        </sect1>            
    </chapter>    
    
    <chapter id="roadmap">
        <title>Roadmap</title>
        <sect1 id="roadmap-main">
            <title>Field-Level "Hide" Permissions</title>
            <para>
                In a future version of JTrac, the ability to even hide fields depending on the role and status
                will be implemented.  The design for this is already in place.
            </para>
        </sect1>
        <sect1>
            <title>Nested Items</title>
            <para>
                JTrac will support "nested" items under a first-level "parent" item and the design
                and database schema for this is already in place.  This will allow users to split tasks into sub-tasks 
                and opens up other possibilities.  One of the plans in the roadmap is to build JTrac into a full-fledged
                requirements capture tool complete with test-case management and traceability.  JTrac can then be used to
                manage either XP (eXtreme Programming) or Use Case driven projects.
            </para>
        </sect1>
        <sect1>
            <title>Wiki Engine</title>            
            <para>
                There is a plan to embed a wiki-engine into JTrac.  This will supplement the requirements management
                road map.
            </para>
        </sect1>
        <sect1>
            <title>Subversion Integration</title>            
            <para>
                Integration with Subversion has already been implemented using the JavaSVN library and this will
                enable effective integration of bug reports with commit history in the future.
                You can try out an the existing experimental support by going to the following url 
                http://[hostname]/jtrac/svn_form.htm                
            </para>
            <para>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="../images/svn-view.png"/>
                    </imageobject>
                    <caption>
                        <para>Experimental Subversion support: commits per user report</para>
                    </caption>
                </mediaobject>
            </para>               
        </sect1>
    </chapter>
    
</book>
