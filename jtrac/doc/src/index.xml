<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<book>
    <bookinfo>
        <title>JTrac</title>
        <subtitle>Reference Documentation</subtitle>
        <releaseinfo>2.0-EA1</releaseinfo>
        <authorgroup>
            <author>
                <firstname>Peter</firstname>
                <surname>Thomas</surname>
            </author>
        </authorgroup>
    </bookinfo>

    <toc/>

    <preface id="preface">
        <title>Preface</title>
        <para>
            This document is a reference guide for <ulink url="http://jtrac.info">JTrac</ulink>
            - the generic issue tracking web-application.  This document is not only a user-guide
            but can also serve as a reference for developers interested in contributing to JTrac.
        </para>
        <para>
            This documentation has been generated using the DocBook configuration 
            used by the <ulink url="http://www.springframework.org">Spring</ulink> development team. 
            This particular simplified DocBook helper package was originally developed by Chris Bauer of the
            <ulink url="http://www.hibernate.org">Hibernate</ulink> project.  Thanks go out to all those who
            perfected this very handy approach.
        </para>
    </preface>

    <chapter id="introduction">
        <title>Introduction</title>

        <sect1 id="introduction-about">
            <title>About</title>
            <para>
                JTrac is a generic issue-tracking web-application that can be easily customized by adding 
                custom fields and drop-downs. Features include customizable workflow, field level permissions, 
                e-mail integration, file attachments and a detailed history view.
            </para>
            <para>
                JTrac was created after the author felt that he could write a much better alternative to a 
                commercial defect tracking tool that he was having to use. Development started in 2004. 
                There have been quite a few releases already and a small but growing base of satisfied users exist 
                who are friends and colleagues of the author. JTrac is ideal for issue tracking but is so generic 
                that you can use it to track well - almost anything.
            </para>
            <para>
                JTrac development used to be hosted at <ulink url="https://jtrac.dev.java.net"/> but moved to SourceForge 
                in early 2006. The older working version was based on Spring JDBC and MS Access and is not being maintained
                any more.  JTrac was completely re-written to use Hibernate for persistence and the Acegi security framework
                for Spring and it now uses the latest Java 5.0 and JSP 2.0 features. 
            </para>            
        </sect1>        
        
        <sect1 id="introduction-features">
            <title>Features</title>
                <para>                    
                    JTrac has all the features you would expect from a standard issue-tracking application such as 
                    file-attachments support and e-mail integration.  However, the powerful customization options,
                    especially in the areas of workflow and field-level permissions make JTrac compare favorably to
                    commercial tools, leave alone free and open-source ones.
                </para>             
            <sect2 id="introduction-features-customfields">
                <title>Custom Fields</title>
                <para>                    
                    JTrac can be used to effectively track various kinds of things such as Bugs, Action Items and Tasks.
                    You can easily add the following types of custom fields to a tracker project:
                    <itemizedlist>
                        <listitem>
                            <para>Drop Down List</para>
                        </listitem>
                        <listitem>
                            <para>Free Text Field</para>
                        </listitem>
                        <listitem>
                            <para>Date Picker</para>
                        </listitem>
                        <listitem>
                            <para>(Decimal) Number</para>
                        </listitem>                                
                    </itemizedlist>                   
                </para>
                <para>
                    <mediaobject>
                        <imageobject role="html">
                            <imagedata align="center" fileref="images/custom-fields.png"/>
                        </imageobject>
                        <caption>
                            <para>Setting up custom fields for a project</para>
                        </caption>
                    </mediaobject>
                </para>                
            </sect2>
            <sect2 id="introduction-features-customworkflow">
                <title>Custom Workflow</title>
                <para>
                    Each tracker project that you create can have a different workflow.  JTrac allows for 
                    complete customization of the tracker-item lifecycle, right down to the names of
                    each intermediate state.  You can even configure whether or not field value editing is
                    permitted for each state - and that too at a field-level.
                </para>
                <para>
                    <mediaobject>
                        <imageobject role="html">
                            <imagedata align="center" fileref="images/custom-workflow-before.png"/>
                        </imageobject>
                        <caption>
                            <para>Default workflow - before customization</para>
                        </caption>
                    </mediaobject>
                </para>
                <para>
                    <mediaobject>
                        <imageobject role="html">
                            <imagedata align="center" fileref="images/custom-workflow-after.png"/>
                        </imageobject>
                        <caption>
                            <para>An example of a customized workflow</para>
                        </caption>
                    </mediaobject>
                </para>                  
            </sect2>
            <sect2 id="introduction-features-customroles">
                <title>Custom Roles</title>
                <para>
                    JTrac customization does not stop at workflow - you can also define different roles for each tracker
                    project that you set up.  This allows for tremendous flexibility - for example you could define that
                    a "DEVELOPER" role can only mark "Assigned" items as "Fixed" and that only a "TESTER" role has the
                    power to mark a "Fixed" item as "Closed".  JTrac allows you complete control over the workflow and
                    you can easily tweak it to fit your existing process rather than the other way around.
                </para>
                <para>
                    Also, field-level permissions can be mapped to roles.  This allows for even more flexibility - for
                    example, you can set a project up so that only a "MANAGER" can change the "Severity" level after a
                    bug is submitted.
                </para>                
            </sect2>             
        </sect1>
    
    </chapter>
    
    <chapter id="roadmap">
        <title>Roadmap</title>
        <sect1 id="roadmap">
            <para>
                In a future version of JTrac, the ability to even hide fields depending on the role and status
                will be implemented.  The design for this is already in place.
            </para>              
            <para>
                JTrac will support "nested" items under a first-level "parent" item and the design
                and database schema for this is already in place.  This will allow users to split tasks into sub-tasks 
                and opens up other possibilities.  One of the plans in the roadmap is to build JTrac into a full-fledged
                requirements capture tool complete with test-case management and traceability.
            </para>
        </sect1>
    </chapter>
    
</book>
